WALLEYE - An MVC style PHP framework

Please note: this is a WORK IN PROGRESS and is not production quality out of the box.

uses
PQP by the Particle Tree Team http://particletree.com/features/php-quick-profiler/
PDO for db interaction
PHPUnit for unit testing

The framework is based around the following directory structure:

httpdocs/
	css/
	images/
	js/
	plugins/
includes/
	app/
		controllers/
		models/
		views/
	config/
	core/
		libraries/
tests/

What follows is a basic introduction to each section of the framework

<h2>httpdocs</h2>
The httpdocs folder contains all resources that are public and accessible through http requests. An .htaccess file is used to route all requests (excluding the css, images, js, and plugins folder) to the index.php file found in httpdocs.

The index.php file is used to create a new instance of Walleye which handles all routes from the url by deciding which controller will handle the request and then rendering the correct view or template.

<h2>includes</h2>
The includes folder contains the application itself. This includes the views, models, and controllers. Also, a folder labeled core  which contains the abstract classes the controllers and models follow, the Walleye class, and the parent classes for both controllers and models (wModel and wController).

The config folder contains three files which are simply three arrays passed to the Walleye class through httpdocs/index.php. The three arrays are for database configuration, setting production mode or local mode, and defining the application routes.

The core folder also contains a folder labeled libraries which is all the server-side libraries the application takes advantage of. There is currently only 1 library: PQP. PQP is used for logging.


<h2>How to use the framework</h2>

Everything starts with index.php in the httpdocs folder. The .htaccess file routes all requests (excluding css, images, js, and plugins) to index.php.

The file creates a new instance of Walleye (the framework), sets the options found in the config folder, and starts the app. This will always be the same.

The Walleye class is found in includes/core. The Walleye class is a singleton and if final. Its main job is to perform the routes found in config/routes.php. The routes are key/value pairs. The key is a regular expression and the value is the controller that should handle that route (aka url). So, the Walleye class performs the route by looping through the routes array until it finds a match then passes control over to a specific controller.

Each controller extends includes/core/wController.php which requires each controller to have a doAction() function and stores the action and data. The function performs what the url says (the action).

ex. /user/login will go to the user controller and perform the action login.

The specific controller does not attempt to handle the business logic. This is handled by a model. In the case of logging in a user, the mUser model will be used. The controller attempts to create a new mUser by passing a username/password pair to the constructor (it’s a static function that returns an instance of self). If a new mUser is correctly authenticated then the the controller will set the logged in user with a function in mUser.

After the login is finished in the backend, the browser needs a page to be rendered to the user. This is handled by wController (/includes/core/wcontroller.php). Each controller extends this class. The class wController contains a function called view($view, $values). When you call this function you need to pass a specific view that should be defined in the Walleye class and the necessary values for that view.

ex. each view (aka template) may contain a placeholder for title. This page requires a title value in order to render correctly.

Once the controller calls view, the view is rendered through the php includes function. The application is finished server-side.


<h2>Database interaction</h2>

A class in /includes/core/libraries/db/ called wDb is used for all interaction with the database. Before using this class the server, user, password, and database must be set in includes/config/db.php. This is an array with values left blank for server, user, password, and database.

The wDb class itself is a singleton and can be created for the first time/called on if already created with the following line:

$db = wDb::getInstance();

Once you have the wDb instance you can do all the functions available to you through PDO. wDb overrides 1 function (prepare()) because PQP is used to store all the unfinished query.


<h2>Logging interaction</h2>

PQP is included in the project and it allows for easy server-side logging. The PQP class found in includes/core/libraries/pqp/ is included before the Walleye class is created so it can be used at anytime.

ex.
Console::log(‘this is a message to be logged’);
Console::logError($ex, $ex->getMessage());


<h2>PHPUnit test</h2>

This project uses PHPUnit to perform unit tests. All tests can be found in the /tests folder. The following is instructions for setting up PHPUnit locally with XAMPP and osx:
register pear if you haven’t already

in Applications/xampp/lib/php/pear

upgrade-allpear
channel-discover pear.phpunit.depear
channel-discover pear.symfony-project.compear

install phpunit/PHPUnit

