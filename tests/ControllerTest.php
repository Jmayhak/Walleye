<?php
namespace Walleye;


require_once '../includes/core/walleye.controller.php';
require_once '../includes/app/controllers/site.php';

/**
 * Test class for Controller.
 * Generated by PHPUnit on 2011-01-18 at 21:07:12.
 */
class ControllerTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    protected static function getMethod($name)
    {
        $class = new \ReflectionClass('Site');
        $method = $class->getMethod($name);
        $method->setAccessible(true);
        return $method;
    }

    public function testGetUrlPathExpected()
    {
        $foo = self::getMethod('getUrlPath');
        $obj = new \Site('/test/1/tester', array());
        $path = $foo->invokeArgs($obj, array('test/1/tester'));
        $this->assertEquals(3, count($path));
    }

    public function testGetUrlPathWithSlashAtBeginning()
    {
        $foo = self::getMethod('getUrlPath');
        $obj = new \Site('/test/1/tester', array());
        $path = $foo->invokeArgs($obj, array('/test/1/tester'));
        $this->assertEquals(3, count($path));
    }

    public function testGetUrlPathWithSlashAtEnd()
    {
        $foo = self::getMethod('getUrlPath');
        $obj = new \Site('/test/1/tester', array());
        $path = $foo->invokeArgs($obj, array('/test/1/tester/'));
        $this->assertEquals(3, count($path));
    }

    public function testGetUrlPathWithData()
    {
        $foo = self::getMethod('getUrlPath');
        $obj = new \Site('/test/1/tester', array());
        $path = $foo->invokeArgs($obj, array('test/1/tester?foo=bar'));
        $this->assertEquals(3, count($path));
    }

    public function testGetUrlPathArray()
    {
        $foo = self::getMethod('getUrlPath');
        $obj = new \Site('/test/1/tester', array());
        $path = $foo->invokeArgs($obj, array('test/1/tester'));
        $this->assertEquals('1', $path[1]);
    }
}

?>
