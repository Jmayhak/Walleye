<?php
require_once 'PHPUnit/Framework.php';

//require_once dirname(__FILE__).'/../../../models/user/user.php';
//require_once dirname(__FILE__).'/../../../models/model.php';

/**
 * Test class for User.
 * Generated by PHPUnit on 2010-04-23 at 03:39:40.
 */
class UserTest extends PHPUnit_Framework_TestCase {
    /**
     * @var User
     */
    protected $object;
    //protected $pqp;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new User;
        //$this->pqp = new PhpQuickProfiler(PhpQuickProfiler::staticGetMicroTime());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        unset($_SESSION[USER_SESSION]);
    }

    public function testWithUserNameAndPassword() {
        $password = md5("j0Nathan!");
        $instance = User::withUserNameAndPassword("Jmayhak", $password);
        $this->assertEquals(1, $instance->getUid());
    }

    public function testWithWrongPasswordUserNameAndPassword() {
        $password = md5("wrongpassword");
        $instance = User::withUserNameAndPassword("Jmayhak", $password);
        $this->assertEquals(0, $instance->getUid());
    }

    public function testWithWrongUserNameUserNameAndPassword() {
        $password = md5("j0Nathan!");
        $instance = User::withUserNameAndPassword("Username", $password);
        $this->assertEquals(0, $instance->getUid());
    }

    public function testWithSessionSuccessfullyCreated() {
        $instance = User::withUserNameAndPassword("Jmayhak", md5("j0Nathan!"));
        $this->assertEquals(32, strlen($_SESSION[USER_SESSION]));
    }

    /*public function testWithUserName() {
        $instance = User::withUserName("Jmayhak");
        $this->assertEquals("Jonathan", $instance->getFirstName());
    }

    public function testWithUid() {
        $instance = User::withUid(1);
        $this->assertEquals("Jmayhak", $instance->getUserName());
    }

    public function testGetUserName() {
        $instance = User::withUid(1);
        $this->assertEquals("Jmayhak", $instance->getUserName());
    }

    public function testSetFirstName() {
        
    }

    public function testSetLastName() {
        
    }

    public function testGetUid() {
        $instance = User::withUid(1);
        $this->assertEquals("Jmayhak", $instance->getUserName());
    }

    public function testGetFirstName() {
        $instance = User::withUid(1);
        $this->assertEquals("Jonathan", $instance->getFirstName());
    }

    public function testGetLastName() {
        $instance = User::withUid(1);
        $this->assertEquals("Mayhak", $instance->getLastName());
    }

    public function testGetRegDate() {
        $instance = User::withUid(1);
        $this->assertEquals("2010-04-19 20:39:01", $instance->getRegDate());
    }

    public function testToString() {
        $instance = User::withUid(1);
        $this->assertEquals("uid: '1' userName: 'Jmayhak' firstName: 'Jonathan' lastName: 'Mayhak' regDate: '2010-04-19 20:39:01'", $instance->toString());
    }*/
}
?>
