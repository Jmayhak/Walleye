<?php
require_once 'PHPUnit/Framework.php';

//require_once dirname(__FILE__).'/../../../models/event/event.php';

/**
 * Test class for Event.
 * Generated by PHPUnit on 2010-04-23 at 03:38:11.
 */
class EventTest extends PHPUnit_Framework_TestCase {
    /**
     * @var Event
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $db = Model::getInstance();
        $event = $db->get_row("SELECT * FROM Events WHERE id = 1");
        if(!$event)
        {
            $db->query("INSERT INTO Events (name, slug, street, apt_number, city, state, zip, latitude, longitude, number, email, start_date, end_date, last_day_to_reg) " .
                       "VALUES ('FBC Ping Pong', 'fbc-ping-pong', '3003 Here', '102', 'New Brighton', 'MN', '55112', '39393939', '49494949', '8045671234', 'Jmayhak@gmail.com', '061787', '071800', '031719')");
        }
        else
        {
            $db->query("UPDATE Events SET name='FBC Ping Pong', slug='fbc-ping-pong', street='3003 Here', apt_number='102', city='New Brighton', state='MN', zip='55112', latitude='39393939', longitude='49494949', number='8045671234', email='Jmayhak@gmail.com', start_date='061787', end_date='071810', last_day_to_reg='031719' " .
                       "WHERE id = 1");
        }
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }

    public function testWithUid() {
        $instance = Event::withId(1);
        $this->assertEquals("FBC Ping Pong", $instance->getName());
    }

    /**
     * @todo Implement testSetName().
     */
    public function testSetName() {
        $instance = Event::withId(1);
        $instance->setName("hellohello");
        $this->assertEquals("hellohello", $instance->getName());
    }

    public function testGetSlug() {
        $instance = Event::withId(1);
        $this->assertEquals("fbc-ping-pong", $instance->getSlug());
    }

    /**
     * @todo Implement testSetSlug().
     */
    public function testSetSlug() {
        $instance = Event::withId(1);
        $instance->setSlug("hello-hello");
        $this->assertEquals("hello-hello", $instance->getSlug());
    }

    public function testGetFullAddress() {
        $instance = Event::withId(1);
        $fullAddress = "";
        foreach($instance->getFullAddress() as $address_key => $address_value)
        {
            $fullAddress .= $address_value;
        }
        $this->assertEquals("3003 Here102New BrightonMN55112", $fullAddress);
    }

    public function testGetStreet() {
        $instance = Event::withId(1);
        $this->assertEquals("3003 Here", $instance->getStreet());
    }

    public function testSetStreet() {
        $instance = Event::withId(1);
        $instance->setStreet("102 hellohello");
        $this->assertEquals("102 hellohello", $instance->getStreet());
    }

    public function testGetAptNumber() {
        $instance = Event::withId(1);
        $this->assertEquals("102", $instance->getAptNumber());
    }

    public function testSetAptNumber() {
        $instance = Event::withId(1);
        $instance->setAptNumber("111");
        $this->assertEquals("111", $instance->getAptNumber());
    }

    public function testGetCity() {
        $instance = Event::withId(1);
        $this->assertEquals("New Brighton", $instance->getCity());
    }

    public function testSetCity() {
        $instance = Event::withId(1);
        $instance->setCity("st paul");
        $this->assertEquals("st paul", $instance->getCity());
    }

    public function testGetState() {
        $instance = Event::withId(1);
        $this->assertEquals("MN", $instance->getState());
    }

    public function testSetState() {
        $instance = Event::withId(1);
        $instance->setState("ky");
        $this->assertEquals("ky", $instance->getState());
    }

    public function testGetZip() {
        $instance = Event::withId(1);
        $this->assertEquals("55112", $instance->getZip());
    }

    public function testSetZip() {
        $instance = Event::withId(1);
        $instance->setZip("29073");
        $this->assertEquals("29073", $instance->getZip());
    }

    public function testGetLatitude() {
        $instance = Event::withId(1);
        $this->assertEquals("39393939", $instance->getLatitude());
    }

    public function testGetLongitude() {
        $instance = Event::withId(1);
        $this->assertEquals("49494949", $instance->getLongitude());
    }

    public function testGetNumber() {
        $instance = Event::withId(1);
        $this->assertEquals("8045671234", $instance->getNumber());
    }

    public function testSetNumber() {
        $instance = Event::withId(1);
        $instance->setNumber("8033518143");
        $this->assertEquals("8033518143", $instance->getNumber());
    }

    public function testGetEmail() {
        $instance = Event::withId(1);
        $this->assertEquals("Jmayhak@gmail.com", $instance->getEmail());
    }

    public function testSetEmail() {
        $instance = Event::withId(1);
        $instance->setEmail("jmayhak@clemson.com");
        $this->assertEquals("jmayhak@clemson.com", $instance->getEmail());
    }

    public function testGetStartDate() {
        $instance = Event::withId(1);
        $this->assertEquals("061787", $instance->getStartDate());
    }

    public function testSetStartDate() {
        $instance = Event::withId(1);
        $instance->setStartDate("061788");
        $this->assertEquals("061788", $instance->getStartDate());
    }

    public function testGetEndDate() {
        $instance = Event::withId(1);
        $this->assertEquals("071810", $instance->getEndDate());
    }

    public function testSetEndDate() {
        $instance = Event::withId(1);
        $instance->setEndDate("071811");
        $this->assertEquals("071811", $instance->getEndDate());
    }

    public function testGetLastDayToReg() {
        $instance = Event::withId(1);
        $this->assertEquals("031719", $instance->getLastDayToReg());
    }

    public function testSetLastDayToReg() {
        $instance = Event::withId(1);
        $instance->setLastDayToReg("031720");
        $this->assertEquals("031720", $instance->getLastDayToReg());
    }

    public function testGetDateCreated() {
        $instance = Event::withId(1);
        $check = "";
        if($instance->getDateCreated())
        {
            $check = "true";
        }
        else
        {
            $check = "false";
        }
        $this->assertEquals("true", $check);
    }

    public function testIsPrivate() {
        $instance = Event::withId(1);
        $instance->setPrivate();
        $this->assertEquals(true, $instance->isPrivate());
    }

    public function testIsPublic() {
        $instance = new Event();
        $this->assertEquals(false, $instance->isPrivate());
    }

    public function testSetPublic() {
        $instance = Event::withId(1);
        $instance->setPrivate();
        $instance->setPublic();
        $this->assertEquals(false, $instance->isPrivate());
    }
}
?>
