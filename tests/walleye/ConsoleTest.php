<?php
namespace Walleye;

/**
 * Test class for Console.
 * Generated by PHPUnit on 2011-01-18 at 21:07:24.
 */
class ConsoleTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        Console::resetLogs();
        //$sql = file_get_contents('./walleye.test.sql');
        //$db = new Database();
        //$reset_stmt = $db->multi_query($sql);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        Console::resetLogs();
    }

    /**
     *
     */
    public function testGetLogsIsArray()
    {
        $this->assertTrue(is_array(Console::getLogs()));
    }

    /**
     *
     */
    public function testGetLogsWhenEmpty()
    {
        $this->assertEquals(0, count(Console::getLogs()));
    }

    /**
     *
     */
    public function testGetLogs()
    {
        Console::log('test', '', '', false);
        $logs = Console::getLogs();
        $this->assertEquals('test', $logs[0]['message']);
    }

    /**
     *
     */
    public function testGetAlerts()
    {
        Console::alert('hello');
        $logs = Console::getAlerts();
        $this->assertEquals('hello', $logs[0]['message']);
    }

    /**
     *
     */
    public function testResetLogs()
    {
        Console::log('test', '', '', false);
        Console::resetLogs();
        $this->assertEquals(0, count(Console::getLogs()));
    }

    /**
     *
     */
    public function testLogMessage()
    {
        Console::log('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('hello', $logs[0]['message']);
    }

    /**
     *
     */
    public function testLogFile()
    {
        Console::log('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('file.php', $logs[0]['file']);
    }

    /**
     *
     */
    public function testLogLineNumber()
    {
        Console::log('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('111', $logs[0]['line']);
    }

    /**
     *
     */
    public function testLogType()
    {
        Console::log('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('log', $logs[0]['type']);
    }

    /**
     *
     */
    public function testLogInsertedToDatabase()
    {
        $db = new Database();
        $get_logcount_stmt = $db->prepare('SELECT count(id) AS num_logs FROM Logs');
        $get_logcount_stmt->execute();
        $row = $db->getRow($get_logcount_stmt);

        Console::log('test', 'file.php', '111');
        $logs = Console::getLogs();
        $this->assertEquals($row->num_logs + 1, $logs[0]['id']);
    }

    /**
     *
     */
    public function testLogErrorMessage()
    {
        Console::logError('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('hello', $logs[0]['message']);
    }

    /**
     *
     */
    public function testLogErrorFile()
    {
        Console::logError('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('file.php', $logs[0]['file']);
    }

    /**
     *
     */
    public function testLogErrorLineNumber()
    {
        Console::logError('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('111', $logs[0]['line']);
    }

    /**
     *
     */
    public function testLogErrorType()
    {
        Console::logError('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('error', $logs[0]['type']);
    }

    /**
     *
     */
    public function testLogErrorInsertedToDatabase()
    {
        $db = new Database();
        $get_logcount_stmt = $db->prepare('SELECT count(id) AS num_logs FROM Logs');
        $get_logcount_stmt->execute();
        $row = $db->getRow($get_logcount_stmt);

        Console::logError('test', 'file.php', '111');
        $logs = Console::getLogs();
        $this->assertEquals($row->num_logs + 1, $logs[0]['id']);
    }

    /**
     *
     */
    public function testAlertMessage()
    {
        Console::Alert('hello', '', '', false);
        $logs = Console::getLogs();
        $this->assertEquals('hello', $logs[0]['message']);
    }

    /**
     *
     */
    public function testAlertFile()
    {
        Console::Alert('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('file.php', $logs[0]['file']);
    }

    /**
     *
     */
    public function testAlertLineNumber()
    {
        Console::Alert('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('111', $logs[0]['line']);
    }

    /**
     *
     */
    public function testAlertType()
    {
        Console::Alert('hello', 'file.php', '111', false);
        $logs = Console::getLogs();
        $this->assertEquals('alert', $logs[0]['type']);
    }

}

?>
