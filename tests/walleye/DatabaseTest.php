<?php
namespace Walleye;

/**
 * Test class for Database.
 * Generated by PHPUnit on 2011-01-18 at 21:06:59.
 */
class DatabaseTest extends \PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }

    public function testConstructDefaultDatabase() {
        $db = new Database();
        $get_logs_stmt = $db->prepare('SELECT id FROM Users');
        $get_logs_stmt->execute();
        $row = $db->getRow($get_logs_stmt);
        $this->assertTrue(!is_null($row));
    }

    public function testConstructDifferentDatabase() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    public function testGetResultIsArray() {
        $db = new Database();
        $get_logs_stmt = $db->prepare('SELECT id FROM Users');
        $get_logs_stmt->execute();
        $results = $db->getResult($get_logs_stmt);
        $this->assertTrue(is_array($results));
    }

    public function testGetResult() {
        $db = new Database();
        $get_logs_stmt = $db->prepare('SELECT id FROM Users');
        $get_logs_stmt->execute();
        $results = $db->getResult($get_logs_stmt);
        $this->assertTrue(!empty($results));
    }

    public function testGetResultEmpty() {
        $db = new Database();
        $get_logs_stmt = $db->prepare('SELECT id FROM Users WHERE id = 0');
        $get_logs_stmt->execute();
        $results = $db->getResult($get_logs_stmt);
        $this->assertTrue(empty($results));
    }

    public function testGetResultWrongParam() {
        $db = new Database();
        $get_logs_stmt = $db->prepare('SELECT id FROM Users');
        $get_logs_stmt->execute();
        $results = $db->getResult($db);
        $this->assertTrue(empty($results));
    }

    public function testGetRow() {
        $db = new Database();
        $get_logs_stmt = $db->prepare('SELECT id FROM Users WHERE id = 1');
        $get_logs_stmt->execute();
        $row = $db->getRow($get_logs_stmt);
        $this->assertEquals('1', User::withId($row->id)->getId());
    }

    public function testGetRowWrongParam() {
        $db = new Database();
        $get_logs_stmt = $db->prepare('SELECT id FROM Users');
        $get_logs_stmt->execute();
        $results = $db->getRow($db);
        $this->assertTrue(empty($results));
    }

    public function testGetRowAndProperty() {
        $db = new Database();
        $stmt = $db->prepare('SELECT username FROM Users WHERE id = 1');
        $stmt->execute();

        $username = $db->getRow($stmt)->username;
        $this->assertEquals('admin@yliapps.com', $username);
    }
}

?>
